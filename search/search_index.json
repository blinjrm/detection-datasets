{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Detection datasets # This site contains the documentation for the detection_datasets library, which aims to make it easy to load and transform datasets for object detection. Table Of Contents # The documentation consists of: Getting started Tutorials API Reference","title":"Home"},{"location":"#welcome-to-detection-datasets","text":"This site contains the documentation for the detection_datasets library, which aims to make it easy to load and transform datasets for object detection.","title":"Welcome to Detection datasets"},{"location":"#table-of-contents","text":"The documentation consists of: Getting started Tutorials API Reference","title":"Table Of Contents"},{"location":"getting_started/","text":"Getting started # 0. Setup # Requirements # Python 3.8+ detection_datasets is upon the great work of: Pandas for manipulating data. Hugging Face Datasets to store and load datasets from the Hub. Installation # $ pip install detection_datasets Import # from detection_datasets import DetectionDataset 1. Read # From local filesystem # config = { 'dataset_format' : 'coco' , # the format of the dataset on disk 'path' : 'path/do/data/on/disk' , # where the dataset is located 'splits' : { # how to read the files 'train' : ( 'train.json' , 'train' ), 'test' : ( 'test.json' , 'test' ), }, } dd = DetectionDataset () dd . from_disk ( ** config ) # note that you can use method cascading as well: # dd = DetectionDataset().from_disk(**config) From the Hugging Face Hub # The detection_dataset library works alongside the Detection dataset organisation on the Hugging Face Hub, where some detection datasets have been uploaded in the format expected by the library, and are ready to use. dd = DetectionDataset () . from_hub ( name = 'fashionpedia' ) Currently supported format for reading datasets are: - COCO - more to come The list of datasets available from the Hub is given by: # Search in the \"detection-datasets\" repository on the Hub. DetectionDataset () . available_in_hub () # Search in another repository on the Hub. DetectionDataset () . available_in_hub ( repo_name = MY_REPO_OR_ORGANISATION ) 2. Transform # The supported transformations are: # Select a subset of images, perserving the splits and their proportions dd . select ( n_images = 1000 ) # Shuffle the dataset, perserving the splits and their proportions dd . shuffle ( seed = 42 ) # Create new train-val-test splits, overwritting the splits from the original dataset dd . split ( splits = [ 0.8 , 0.1 , 0.1 ]) # Map existing categories to new categories. # The annotations with a category absent from the mapping are dropped. dd . map_categories ( mapping = { 'existing_category' : 'new_category' }) These transformations can be chained; for example here we select a subset of 10.000 images and create new train-val-test splits: dd = DetectionDataset () \\ . from_hub ( name = 'fashionpedia' ) \\ . select ( n_images = 10000 ) \\ . split ( splits = [ 0.8 , 0.1 , 0.1 ]) 3. Visualize # The DetectionDataset objects contains several properties to analyze your data: dd . data # This is equivlent to calling `dd.get_data('image')`, # and returns a DataFrame with 1 row per image dd . get_data ( 'bbox' ) # Returns a DataFrame with 1 row per annotation dd . n_images # Number of images dd . n_bbox # Number of annotations dd . splits # List of split names dd . split_proportions # DataFrame with the % of iamges in each split dd . categories # DataFrame with the categories and thei ids dd . category_names # List of categories dd . n_categories # Number of categories You can also visualize a image with its annotations in a notebook: dd . show () # Shows a random image from the dataset dd . show ( image_id = 42 ) # Shows the select image based on image_id 4. Write # To local filesystem # Once the dataset is ready, you can write it to the local filesystem in a given format: dd . to_disk ( dataset_format = 'yolo' , name = 'MY_DATASET_NAME' , path = 'DIRECTORY_TO_WRITE_TO' , ) Currently supported format for writing datasets are: - YOLO - MMDET - more to come To the Hugging Face Hub # The dataset can also be easily uploaded to the Hugging Face Hub, for reuse later on or in a different environment: dd . to_hub ( dataset_name = 'MY_DATASET_NAME' , repo_name = 'MY_REPO_OR_ORGANISATION' ) The dataset viewer on the Hub will work out of the box, and we encourage you to update the README in your new repo to make it easier for the comminuty to use the dataset.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#0-setup","text":"","title":"0. Setup"},{"location":"getting_started/#requirements","text":"Python 3.8+ detection_datasets is upon the great work of: Pandas for manipulating data. Hugging Face Datasets to store and load datasets from the Hub.","title":"Requirements"},{"location":"getting_started/#installation","text":"$ pip install detection_datasets","title":"Installation"},{"location":"getting_started/#import","text":"from detection_datasets import DetectionDataset","title":"Import"},{"location":"getting_started/#1-read","text":"","title":"1. Read"},{"location":"getting_started/#from-local-filesystem","text":"config = { 'dataset_format' : 'coco' , # the format of the dataset on disk 'path' : 'path/do/data/on/disk' , # where the dataset is located 'splits' : { # how to read the files 'train' : ( 'train.json' , 'train' ), 'test' : ( 'test.json' , 'test' ), }, } dd = DetectionDataset () dd . from_disk ( ** config ) # note that you can use method cascading as well: # dd = DetectionDataset().from_disk(**config)","title":"From local filesystem"},{"location":"getting_started/#from-the-hugging-face-hub","text":"The detection_dataset library works alongside the Detection dataset organisation on the Hugging Face Hub, where some detection datasets have been uploaded in the format expected by the library, and are ready to use. dd = DetectionDataset () . from_hub ( name = 'fashionpedia' ) Currently supported format for reading datasets are: - COCO - more to come The list of datasets available from the Hub is given by: # Search in the \"detection-datasets\" repository on the Hub. DetectionDataset () . available_in_hub () # Search in another repository on the Hub. DetectionDataset () . available_in_hub ( repo_name = MY_REPO_OR_ORGANISATION )","title":"From the Hugging Face Hub"},{"location":"getting_started/#2-transform","text":"The supported transformations are: # Select a subset of images, perserving the splits and their proportions dd . select ( n_images = 1000 ) # Shuffle the dataset, perserving the splits and their proportions dd . shuffle ( seed = 42 ) # Create new train-val-test splits, overwritting the splits from the original dataset dd . split ( splits = [ 0.8 , 0.1 , 0.1 ]) # Map existing categories to new categories. # The annotations with a category absent from the mapping are dropped. dd . map_categories ( mapping = { 'existing_category' : 'new_category' }) These transformations can be chained; for example here we select a subset of 10.000 images and create new train-val-test splits: dd = DetectionDataset () \\ . from_hub ( name = 'fashionpedia' ) \\ . select ( n_images = 10000 ) \\ . split ( splits = [ 0.8 , 0.1 , 0.1 ])","title":"2. Transform"},{"location":"getting_started/#3-visualize","text":"The DetectionDataset objects contains several properties to analyze your data: dd . data # This is equivlent to calling `dd.get_data('image')`, # and returns a DataFrame with 1 row per image dd . get_data ( 'bbox' ) # Returns a DataFrame with 1 row per annotation dd . n_images # Number of images dd . n_bbox # Number of annotations dd . splits # List of split names dd . split_proportions # DataFrame with the % of iamges in each split dd . categories # DataFrame with the categories and thei ids dd . category_names # List of categories dd . n_categories # Number of categories You can also visualize a image with its annotations in a notebook: dd . show () # Shows a random image from the dataset dd . show ( image_id = 42 ) # Shows the select image based on image_id","title":"3. Visualize"},{"location":"getting_started/#4-write","text":"","title":"4. Write"},{"location":"getting_started/#to-local-filesystem","text":"Once the dataset is ready, you can write it to the local filesystem in a given format: dd . to_disk ( dataset_format = 'yolo' , name = 'MY_DATASET_NAME' , path = 'DIRECTORY_TO_WRITE_TO' , ) Currently supported format for writing datasets are: - YOLO - MMDET - more to come","title":"To local filesystem"},{"location":"getting_started/#to-the-hugging-face-hub","text":"The dataset can also be easily uploaded to the Hugging Face Hub, for reuse later on or in a different environment: dd . to_hub ( dataset_name = 'MY_DATASET_NAME' , repo_name = 'MY_REPO_OR_ORGANISATION' ) The dataset viewer on the Hub will work out of the box, and we encourage you to update the README in your new repo to make it easier for the comminuty to use the dataset.","title":"To the Hugging Face Hub"},{"location":"tutorials/","text":"Notebooks coming.","title":"Tutorials"},{"location":"reference/","text":"API reference # The librairy exposes two main, user-facing classes to facilitate conversion, whether between complete formats or simply between bounding boxes format. DetectionDataset : converts datasets between different formats Bbox : converts bounding boxes between different formats. There are also some internal components that are exposed for advanced users: Readers Writers","title":"API Reference"},{"location":"reference/#api-reference","text":"The librairy exposes two main, user-facing classes to facilitate conversion, whether between complete formats or simply between bounding boxes format. DetectionDataset : converts datasets between different formats Bbox : converts bounding boxes between different formats. There are also some internal components that are exposed for advanced users: Readers Writers","title":"API reference"},{"location":"reference/bbox/","text":"Class for manipulating bounding boxes. All bounding boxes are converted to internally the VOC format: [xmin, ymin, xmax, ymax], and can be exported to the VOC, COCO and YOLO formats. Source code in detection_datasets/bbox.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Bbox : \"\"\"Class for manipulating bounding boxes. All bounding boxes are converted to internally the VOC format: [xmin, ymin, xmax, ymax], and can be exported to the VOC, COCO and YOLO formats. \"\"\" def __init__ ( self , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> None : self . bbox = bbox self . width = width self . height = height self . bbox_id = bbox_id self . _validate_bbox () @classmethod def from_voc ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Keep the bbox in VOC format: xmin, ymin, xmax, ymax.\"\"\" return Bbox ( bbox , width , height , bbox_id ) @classmethod def from_coco ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from COCO format: xmin, ymin, w, h.\"\"\" bbox = [ bbox [ 0 ], bbox [ 1 ], bbox [ 0 ] + bbox [ 2 ], bbox [ 1 ] + bbox [ 3 ]] return Bbox ( bbox , width , height , bbox_id ) @classmethod def from_yolo ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from YOLO format: relative xc, yc, w, h.\"\"\" assert bbox [ 0 ] < 1 and bbox [ 1 ] < 1 and bbox [ 2 ] < 1 and bbox [ 3 ] < 1 , \"yolo bbox must be relative\" bbox = [ bbox [ 0 ] - bbox [ 2 ] / 2 , bbox [ 1 ] - bbox [ 3 ] / 2 , bbox [ 0 ] + bbox [ 2 ] / 2 , bbox [ 1 ] + bbox [ 3 ] / 2 ] bbox = [ bbox [ 0 ] * width , bbox [ 1 ] * height , bbox [ 2 ] * width , bbox [ 3 ] * height ] return Bbox ( bbox , width , height , bbox_id ) def to_voc ( self ) -> list [ float ]: \"\"\"Bbox is already in VOC format internally.\"\"\" return self . bbox def to_coco ( self ) -> list [ float ]: \"\"\"Convert the bbox to COCO format: xmin, ymin, w, h.\"\"\" return [ self . bbox [ 0 ], self . bbox [ 1 ], self . bbox [ 2 ] - self . bbox [ 0 ], self . bbox [ 3 ] - self . bbox [ 1 ]] def to_yolo ( self ) -> list [ float ]: \"\"\"Convert the bbox to YOLO format: relative xc, yc, w, h.\"\"\" bbox = self . to_coco () bbox = [ bbox [ 0 ] / self . width , bbox [ 1 ] / self . height , bbox [ 2 ] / self . width , bbox [ 3 ] / self . height ] return bbox def _validate_bbox ( self ) -> None : \"\"\"Asserts that the bbox to the correct size.\"\"\" assert self . bbox [ 2 ] >= self . bbox [ 0 ] and self . bbox [ 3 ] >= self . bbox [ 1 ], \"bbox must be a rectangle\" # assert self.bbox[2] <= self.width and self.bbox[3] <= self.height, \"bbox must be inside the image\" if not self . bbox [ 2 ] <= self . width : print ( f \"Warning: incorrect bbox_id { self . bbox_id } : x_max { self . bbox [ 2 ] } > image width { self . width } \" ) if not self . bbox [ 3 ] <= self . height : print ( f \"Warning: incorrect bbox_id { self . bbox_id } : y_max { self . bbox [ 3 ] } > image height { self . height } \" ) def __repr__ ( self ): return f \"Bbox id { self . bbox_id } { self . bbox } \" def __print__ ( self ): return self . __repr__ () from_coco ( bbox , width , height , bbox_id ) classmethod # Convert the bbox from COCO format: xmin, ymin, w, h. Source code in detection_datasets/bbox.py 24 25 26 27 28 29 @classmethod def from_coco ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from COCO format: xmin, ymin, w, h.\"\"\" bbox = [ bbox [ 0 ], bbox [ 1 ], bbox [ 0 ] + bbox [ 2 ], bbox [ 1 ] + bbox [ 3 ]] return Bbox ( bbox , width , height , bbox_id ) from_voc ( bbox , width , height , bbox_id ) classmethod # Keep the bbox in VOC format: xmin, ymin, xmax, ymax. Source code in detection_datasets/bbox.py 18 19 20 21 22 @classmethod def from_voc ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Keep the bbox in VOC format: xmin, ymin, xmax, ymax.\"\"\" return Bbox ( bbox , width , height , bbox_id ) from_yolo ( bbox , width , height , bbox_id ) classmethod # Convert the bbox from YOLO format: relative xc, yc, w, h. Source code in detection_datasets/bbox.py 31 32 33 34 35 36 37 38 39 @classmethod def from_yolo ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from YOLO format: relative xc, yc, w, h.\"\"\" assert bbox [ 0 ] < 1 and bbox [ 1 ] < 1 and bbox [ 2 ] < 1 and bbox [ 3 ] < 1 , \"yolo bbox must be relative\" bbox = [ bbox [ 0 ] - bbox [ 2 ] / 2 , bbox [ 1 ] - bbox [ 3 ] / 2 , bbox [ 0 ] + bbox [ 2 ] / 2 , bbox [ 1 ] + bbox [ 3 ] / 2 ] bbox = [ bbox [ 0 ] * width , bbox [ 1 ] * height , bbox [ 2 ] * width , bbox [ 3 ] * height ] return Bbox ( bbox , width , height , bbox_id ) to_coco () # Convert the bbox to COCO format: xmin, ymin, w, h. Source code in detection_datasets/bbox.py 46 47 48 49 def to_coco ( self ) -> list [ float ]: \"\"\"Convert the bbox to COCO format: xmin, ymin, w, h.\"\"\" return [ self . bbox [ 0 ], self . bbox [ 1 ], self . bbox [ 2 ] - self . bbox [ 0 ], self . bbox [ 3 ] - self . bbox [ 1 ]] to_voc () # Bbox is already in VOC format internally. Source code in detection_datasets/bbox.py 41 42 43 44 def to_voc ( self ) -> list [ float ]: \"\"\"Bbox is already in VOC format internally.\"\"\" return self . bbox to_yolo () # Convert the bbox to YOLO format: relative xc, yc, w, h. Source code in detection_datasets/bbox.py 51 52 53 54 55 56 def to_yolo ( self ) -> list [ float ]: \"\"\"Convert the bbox to YOLO format: relative xc, yc, w, h.\"\"\" bbox = self . to_coco () bbox = [ bbox [ 0 ] / self . width , bbox [ 1 ] / self . height , bbox [ 2 ] / self . width , bbox [ 3 ] / self . height ] return bbox","title":"Bbox"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.from_coco","text":"Convert the bbox from COCO format: xmin, ymin, w, h. Source code in detection_datasets/bbox.py 24 25 26 27 28 29 @classmethod def from_coco ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from COCO format: xmin, ymin, w, h.\"\"\" bbox = [ bbox [ 0 ], bbox [ 1 ], bbox [ 0 ] + bbox [ 2 ], bbox [ 1 ] + bbox [ 3 ]] return Bbox ( bbox , width , height , bbox_id )","title":"from_coco()"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.from_voc","text":"Keep the bbox in VOC format: xmin, ymin, xmax, ymax. Source code in detection_datasets/bbox.py 18 19 20 21 22 @classmethod def from_voc ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Keep the bbox in VOC format: xmin, ymin, xmax, ymax.\"\"\" return Bbox ( bbox , width , height , bbox_id )","title":"from_voc()"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.from_yolo","text":"Convert the bbox from YOLO format: relative xc, yc, w, h. Source code in detection_datasets/bbox.py 31 32 33 34 35 36 37 38 39 @classmethod def from_yolo ( cls , bbox : list [ float ], width : float , height : float , bbox_id : int ) -> Bbox : \"\"\"Convert the bbox from YOLO format: relative xc, yc, w, h.\"\"\" assert bbox [ 0 ] < 1 and bbox [ 1 ] < 1 and bbox [ 2 ] < 1 and bbox [ 3 ] < 1 , \"yolo bbox must be relative\" bbox = [ bbox [ 0 ] - bbox [ 2 ] / 2 , bbox [ 1 ] - bbox [ 3 ] / 2 , bbox [ 0 ] + bbox [ 2 ] / 2 , bbox [ 1 ] + bbox [ 3 ] / 2 ] bbox = [ bbox [ 0 ] * width , bbox [ 1 ] * height , bbox [ 2 ] * width , bbox [ 3 ] * height ] return Bbox ( bbox , width , height , bbox_id )","title":"from_yolo()"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.to_coco","text":"Convert the bbox to COCO format: xmin, ymin, w, h. Source code in detection_datasets/bbox.py 46 47 48 49 def to_coco ( self ) -> list [ float ]: \"\"\"Convert the bbox to COCO format: xmin, ymin, w, h.\"\"\" return [ self . bbox [ 0 ], self . bbox [ 1 ], self . bbox [ 2 ] - self . bbox [ 0 ], self . bbox [ 3 ] - self . bbox [ 1 ]]","title":"to_coco()"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.to_voc","text":"Bbox is already in VOC format internally. Source code in detection_datasets/bbox.py 41 42 43 44 def to_voc ( self ) -> list [ float ]: \"\"\"Bbox is already in VOC format internally.\"\"\" return self . bbox","title":"to_voc()"},{"location":"reference/bbox/#detection_datasets.bbox.Bbox.to_yolo","text":"Convert the bbox to YOLO format: relative xc, yc, w, h. Source code in detection_datasets/bbox.py 51 52 53 54 55 56 def to_yolo ( self ) -> list [ float ]: \"\"\"Convert the bbox to YOLO format: relative xc, yc, w, h.\"\"\" bbox = self . to_coco () bbox = [ bbox [ 0 ] / self . width , bbox [ 1 ] / self . height , bbox [ 2 ] / self . width , bbox [ 3 ] / self . height ] return bbox","title":"to_yolo()"},{"location":"reference/detection_dataset/","text":"Source code in detection_datasets/detection_dataset.pyclass DetectionDataset : COLUMNS = [ \"image_id\" , \"image_path\" , \"width\" , \"height\" , \"split\" , \"bbox_id\" , \"category_id\" , \"category\" , \"bbox\" , \"area\" , ] _data = pd . DataFrame ( columns = COLUMNS ) . set_index ([ \"image_id\" , \"bbox_id\" ]) def __init__ ( self , data : pd . DataFrame = None ) -> None : \"\"\"Initialize the dataset. Don't call the constructr directly, use `from_hub()` or `from_disk()` methods instead. \"\"\" self . _format = \"init\" if data is not None : self . _concat ( data ) @property def data ( self ) -> pd . DataFrame : \"\"\"Getter for the data, with annotations grouped by images.\"\"\" return self . get_data () def get_data ( self , index : str = \"image\" ) -> pd . DataFrame : \"\"\"Getter for the data, with the possibility to specify the format.\"\"\" data = self . set_format ( index = index ) return data @property def format ( self ) -> str : \"\"\"Getter for the current format of the data (\"image\" or \"bbox\").\"\"\" return self . _format def _concat ( self , other_data : pd . DataFrame , other_data_format : str = \"bbox\" ) -> pd . DataFrame : \"\"\"Concatenate the existing data with new data.\"\"\" self . set_format ( index = other_data_format ) self . _data = pd . concat ([ self . _data . reset_index ()[ self . COLUMNS ], other_data [ self . COLUMNS ]]) self . set_format ( index = \"image\" ) def from_hub ( self , dataset_name : str , repo_name : str = ORGANISATION , in_memory : bool = False ) -> DetectionDataset : \"\"\"Load a dataset from the Hugging Face Hub. Currently only datasets from the 'detection-datasets' organisation can be loaded. Args: name: name of the dataset, without the organisation's prefix. in_memory: whether to keep the images in memory. Set to False if the system runs out of memory, then the images will be downloaded and only the path to these images will be saved in the data. Defaults to True. Returns: A DetectionDataset instance containing the loaded data. \"\"\" if dataset_name not in self . available_in_hub ( repo_name = repo_name ): raise ValueError ( f \"\"\" { dataset_name } is not available on the Hub. Use `DetectionDataset.available_in_hub() to get the list of available datasets.\"\"\" ) path = \"/\" . join ([ repo_name , dataset_name ]) ds = load_dataset ( path = path ) categories = ds [ list ( ds . keys ())[ 0 ]] . features [ \"objects\" ] . feature [ \"category\" ] if not in_memory : DOWNLOAD_PATH = Path . home () / CACHE_DIR DOWNLOAD_PATH . mkdir ( parents = True , exist_ok = True ) def download_images ( row ): file_path = \"\" . join ([ DOWNLOAD_PATH . as_posix (), \"/\" , str ( row [ \"image_id\" ]), \".jpg\" ]) row [ \"image\" ] . save ( file_path ) row [ \"image_path\" ] = file_path return row ds = ds . map ( download_images , remove_columns = \"image\" , load_from_cache_file = False , desc = \"Moving images from memory to disk\" , ) df_splits = [] for key in ds . keys (): df_split = ds [ key ] . to_pandas () df_split [ \"split\" ] = key df_splits . append ( df_split ) df = pd . concat ( df_splits ) df = df . reset_index ( drop = True ) objects = pd . json_normalize ( df [ \"objects\" ]) data = df . join ( objects ) if \"image_path\" not in data . columns : data [ \"image_path\" ] = [ x [ \"bytes\" ] for x in data . loc [:, \"image\" ]] data = data . drop ( columns = [ \"objects\" , \"image\" ], errors = \"ignore\" ) data [ \"category_id\" ] = data . loc [:, \"category\" ] data [ \"category\" ] = [[ categories . int2str ( int ( x )) for x in row [ \"category\" ]] for _ , row in data . iterrows ()] data = data . explode ([ \"bbox_id\" , \"category_id\" , \"category\" , \"bbox\" , \"area\" ]) data [ \"bbox\" ] = [ Bbox . from_voc ( row . bbox , row . width , row . height , row . bbox_id ) for _ , row in data . iterrows ()] self . _concat ( other_data = data ) return self def available_in_hub ( self , repo_name : str = ORGANISATION ) -> list [ str ]: \"\"\"List the datasets available in the Hugging Face Hub. Args: repo_name: user or organisation where the dataset is stored on the Hub. Returns: List of names of datasets registered in the Hugging Face Hub, under the 'detection-datasets' organisation. \"\"\" datasets = api . list_datasets ( author = repo_name ) return [ dataset . id . split ( \"/\" )[ - 1 ] for dataset in datasets ] def from_disk ( self , dataset_format : str , path : str , ** kwargs ) -> DetectionDataset : \"\"\"Load a dataset from disk. This is a factory method that can read the dataset from different formats, when the dataset is already in a local directory. Args: dataset_format: Format of the dataset. Currently supported values and formats: - \"coco\": COCO format path: Path to the dataset on the local filesystem. **kwargs: Keyword arguments specific to the dataset_format. Returns: A DetectionDataset instance containing the loaded data. \"\"\" reader = reader_factory . get ( dataset_format = dataset_format , path = path , ** kwargs ) data = reader . read () self . _concat ( other_data = data ) return self def to_hub ( self , dataset_name : str , repo_name : str , ** kwargs ) -> DetectionDataset : \"\"\"Push the dataset to the hub as a Parquet dataset. This method wraps Hugging Face's DatasetDict.push_to_hub() method. The dataset is pushed as a DatasetDict, meaning the each split (train, val, test), if present, will be a separate Dataset instance inside this DatasetDict. Args: dataset_name: name of the dataset inside the user/organisation's repository. repo_name: user of organisation to push the dataset to. \"\"\" repo_id = \"/\" . join ([ repo_name , dataset_name ]) hf_dataset_dict = self . get_hf_dataset () hf_dataset_dict . push_to_hub ( repo_id = repo_id , ** kwargs ) return self def get_hf_dataset ( self ) -> DatasetDict : \"\"\"Get the data formatted as an Hugging Face DatasetDict instance. The DatasetDict contains a Dataset for each split present in the data. All methods and properties of the DatasetDict can then be used. Returns: Data formatted as an Hugging Face DatasetDict instance \"\"\" data = self . set_format ( index = \"image\" ) . reset_index () data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in data . bbox ] hf_dataset_dict = DatasetDict () for split in self . splits : split_data = data [ data . split == split ] images_data = [] for _ , row in split_data . iterrows (): objects = {} objects [ \"bbox_id\" ] = row [ \"bbox_id\" ] objects [ \"category\" ] = row [ \"category\" ] objects [ \"bbox\" ] = row [ \"bbox\" ] objects [ \"area\" ] = row [ \"area\" ] image = {} image [ \"image_id\" ] = row [ \"image_id\" ] image [ \"image\" ] = row [ \"image_path\" ] image [ \"width\" ] = row [ \"width\" ] image [ \"height\" ] = row [ \"height\" ] image [ \"objects\" ] = objects images_data . append ( image ) df = pd . DataFrame . from_dict ( images_data ) features = Features ( { \"image_id\" : Value ( dtype = \"int64\" ), \"image\" : Image ( decode = True ), \"width\" : Value ( dtype = \"int64\" ), \"height\" : Value ( dtype = \"int64\" ), \"objects\" : Sequence ( { \"bbox_id\" : Value ( dtype = \"int64\" ), \"category\" : ClassLabel ( names = self . category_names ), \"bbox\" : Sequence ( feature = Value ( dtype = \"float64\" ), length = 4 ), \"area\" : Value ( dtype = \"int64\" ), } ), } ) ds = Dataset . from_pandas ( df = df , features = features , split = split ) hf_dataset_dict [ split ] = ds return hf_dataset_dict def to_disk ( self , dataset_format : str , name : str , absolute_path : str ) -> DetectionDataset : \"\"\"Write the dataset to disk. This is a factory method that can write the dataset to disk in the selected format (e.g. COCO, MMDET, YOLO) Args: dataset_format: Format of the dataset. Currently supported formats: - \"yolo\": YOLO format - \"mmdet\": MMDET internal format, see: https://mmdetection.readthedocs.io/en/latest/tutorials/customize_dataset.html#reorganize-new-data-format-to-middle-format name: Name of the dataset to be created in the \"path\" directory. absolute_path: Absolute path to the directory where the dataset will be created. **kwargs: Keyword arguments specific to the dataset_format. \"\"\" writer = writer_factory . get ( dataset_format = dataset_format , dataset = self , name = name , path = absolute_path ) writer . write () return self def set_format ( self , index : str ) -> pd . DataFrame : if index == self . _format : pass elif index == \"image\" : self . _data_by_image () elif index == \"bbox\" : self . _data_by_bbox () else : raise ValueError ( f \"The index must be either 'image' or 'bbox', not ' { index } '.\" ) return self . _data . copy () def _data_by_image ( self ) -> pd . DataFrame : \"\"\"Returns the data grouped by image. Returns: A DataFrame grouped by image, meaning that each may contain data related to multiple bboxes. \"\"\" data = self . _data . reset_index () . groupby ( \"image_id\" ) self . _data = pd . DataFrame ( { \"image_path\" : data [ \"image_path\" ] . first (), \"width\" : data [ \"width\" ] . first (), \"height\" : data [ \"height\" ] . first (), \"split\" : data [ \"split\" ] . first (), \"bbox_id\" : data [ \"bbox_id\" ] . apply ( list ), \"bbox\" : data [ \"bbox\" ] . apply ( list ), \"category_id\" : data [ \"category_id\" ] . apply ( list ), \"category\" : data [ \"category\" ] . apply ( list ), \"area\" : data [ \"area\" ] . apply ( list ), } ) self . _format = \"image\" def _data_by_bbox ( self ) -> pd . DataFrame : \"\"\"Converts a DataFrame arranged by image to a DataFrame arranged by bbox. This method reverses the effect of calling self._data_by_image(). Args: data: Dataframe to explode. Returns: A DataFrame arranged by bbox instead of images. \"\"\" self . _data = ( self . _data . reset_index () . explode ([ \"bbox_id\" , \"category_id\" , \"category\" , \"bbox\" , \"area\" ]) . set_index ([ \"image_id\" , \"bbox_id\" ]) ) self . _format = \"bbox\" def select ( self , n_images : int , seed : int = 42 ) -> DetectionDataset : \"\"\"Limits the number of images to n_images. Args: n_images: Number of images to include in the dataset. The original proportion of images between splits will be respected. seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) if self . n_images > len ( data_by_image ): raise ValueError ( \"The number of images to include in the dataset is greater than the number of existing images.\" ) split_data = [] for split in Split : sample_size = int ( n_images * self . split_proportions [ split . value ]) split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( n = sample_size , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self def shuffle ( self , seed : int = 42 ) -> DetectionDataset : \"\"\"Shuffles the dataset. Args: seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) split_data = [] for split in Split : split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( frac = 1 , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self def split ( self , splits : Iterable [ float ]) -> DetectionDataset : \"\"\"Splits the dataset into train, val and test. Args: splits: Iterable containing the proportion of images to include in the train, val and test splits. The sum of the values in the iterable must be equal to 1. The original splits will be overwritten. \"\"\" if len ( splits ) != 3 : raise ValueError ( \"The splits must contain 3 elements.\" ) if sum ( splits ) != 1 : raise ValueError ( f \"The sum of the proportion for each split must be equal to 1, here it is: { sum ( splits ) } .\" ) data_by_image = self . set_format ( index = \"image\" ) n_train = int ( splits [ 0 ] * len ( data_by_image )) n_val = int ( n_train + splits [ 1 ] * len ( data_by_image )) n_test = int ( n_val + splits [ 2 ] * len ( data_by_image )) data_by_image = data_by_image . sample ( frac = 1 , random_state = 42 ) data_train , data_val , data_test , _ = np . split ( data_by_image , [ n_train , n_val , n_test ]) data_train [ \"split\" ] = Split . TRAIN . value data_val [ \"split\" ] = Split . VAL . value data_test [ \"split\" ] = Split . TEST . value self . _data = pd . concat ([ data_train , data_val , data_test ]) return self def map_categories ( self , mapping : dict [ str , str ]) -> DetectionDataset : \"\"\"Maps the categories to the new categories. The new categoy names replace the existing ones. Annotations with categories not present in the mapping are dropped. The new category_ids correspond the the rank of the new categories in alphabetical order. Args: mapping: A dictionnary mapping original categories to new categories. \"\"\" data = self . set_format ( index = \"bbox\" ) . reset_index () data [ \"category\" ] = data . loc [:, \"category\" ] . map ( mapping ) data = data [ ~ data . category . isna ()] categories = sorted ( data . category . unique ()) data [ \"category_id\" ] = data . loc [:, \"category\" ] . apply ( lambda cat : categories . index ( cat )) self . _data = data . set_index ([ \"image_id\" , \"bbox_id\" ]) return self def show ( self , image_id : int = None ) -> PILImage : \"\"\"Show the image with bounding boxes and labels. Args: image_id: Id of the image. If not provided, a random image is selected. Defaults to None. Returns: Image with bounding boxes and labels. \"\"\" data = self . set_format ( index = \"bbox\" ) if image_id is None : index = np . random . randint ( 0 , len ( data )) image_id = data . reset_index () . iloc [ index ][ \"image_id\" ] rows = data . loc [ image_id ] image = show_image_bbox ( rows = rows ) return image @property def n_images ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"image\" ) return len ( data ) @property def n_bbox ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"bbox\" ) return len ( data ) @property def splits ( self ) -> list [ str ]: \"\"\"Returns the splits of the dataset. Returns: The splits present in the dataset. \"\"\" return self . _data . split . unique () . tolist () @property def split_proportions ( self ) -> pd . DataFrame : \"\"\"Returns the proportion of images in the train, val and test splits. Returns: The proportion of images in the train, val and test splits. \"\"\" data = self . set_format ( index = \"image\" ) return pd . DataFrame ({ s . value : [ len ( data [ data . split == s . value ]) / len ( data )] for s in Split }) @property def categories ( self ) -> pd . DataFrame : \"\"\"Creates a DataFrame containing the categories found in the data with their id.\"\"\" data = self . set_format ( index = \"bbox\" ) return ( data . loc [:, [ \"category_id\" , \"category\" ]] . drop_duplicates () . astype ({ \"category_id\" : int , \"category\" : \"object\" }) . sort_values ( \"category_id\" ) . set_index ( \"category_id\" ) ) @property def category_names ( self ) -> list [ str ]: \"\"\"Returns the categories names. Returns: The categories names. \"\"\" return list ( self . categories [ \"category\" ] . unique ()) @property def n_categories ( self ) -> int : \"\"\"Returns the number of categories. Returns: The number of categories. \"\"\" return self . categories [ \"category\" ] . nunique () __init__ ( data = None ) # Initialize the dataset. Don't call the constructr directly, use from_hub() or from_disk() methods instead. Source code in detection_datasets/detection_dataset.py 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , data : pd . DataFrame = None ) -> None : \"\"\"Initialize the dataset. Don't call the constructr directly, use `from_hub()` or `from_disk()` methods instead. \"\"\" self . _format = \"init\" if data is not None : self . _concat ( data ) available_in_hub ( repo_name = ORGANISATION ) # List the datasets available in the Hugging Face Hub. Parameters: Name Type Description Default repo_name str user or organisation where the dataset is stored on the Hub. ORGANISATION Returns: Type Description list [ str ] List of names of datasets registered in the Hugging Face Hub, under the 'detection-datasets' organisation. Source code in detection_datasets/detection_dataset.py 145 146 147 148 149 150 151 152 153 154 155 156 157 def available_in_hub ( self , repo_name : str = ORGANISATION ) -> list [ str ]: \"\"\"List the datasets available in the Hugging Face Hub. Args: repo_name: user or organisation where the dataset is stored on the Hub. Returns: List of names of datasets registered in the Hugging Face Hub, under the 'detection-datasets' organisation. \"\"\" datasets = api . list_datasets ( author = repo_name ) return [ dataset . id . split ( \"/\" )[ - 1 ] for dataset in datasets ] categories () property # Creates a DataFrame containing the categories found in the data with their id. Source code in detection_datasets/detection_dataset.py 507 508 509 510 511 512 513 514 515 516 517 518 519 @property def categories ( self ) -> pd . DataFrame : \"\"\"Creates a DataFrame containing the categories found in the data with their id.\"\"\" data = self . set_format ( index = \"bbox\" ) return ( data . loc [:, [ \"category_id\" , \"category\" ]] . drop_duplicates () . astype ({ \"category_id\" : int , \"category\" : \"object\" }) . sort_values ( \"category_id\" ) . set_index ( \"category_id\" ) ) category_names () property # Returns the categories names. Returns: Type Description list [ str ] The categories names. Source code in detection_datasets/detection_dataset.py 521 522 523 524 525 526 527 528 529 @property def category_names ( self ) -> list [ str ]: \"\"\"Returns the categories names. Returns: The categories names. \"\"\" return list ( self . categories [ \"category\" ] . unique ()) data () property # Getter for the data, with annotations grouped by images. Source code in detection_datasets/detection_dataset.py 51 52 53 54 55 @property def data ( self ) -> pd . DataFrame : \"\"\"Getter for the data, with annotations grouped by images.\"\"\" return self . get_data () format () property # Getter for the current format of the data (\"image\" or \"bbox\"). Source code in detection_datasets/detection_dataset.py 64 65 66 67 68 @property def format ( self ) -> str : \"\"\"Getter for the current format of the data (\"image\" or \"bbox\").\"\"\" return self . _format from_disk ( dataset_format , path , ** kwargs ) # Load a dataset from disk. This is a factory method that can read the dataset from different formats, when the dataset is already in a local directory. Parameters: Name Type Description Default dataset_format str Format of the dataset. Currently supported values and formats: - \"coco\": COCO format required path str Path to the dataset on the local filesystem. required **kwargs Keyword arguments specific to the dataset_format. {} Returns: Type Description DetectionDataset A DetectionDataset instance containing the loaded data. Source code in detection_datasets/detection_dataset.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def from_disk ( self , dataset_format : str , path : str , ** kwargs ) -> DetectionDataset : \"\"\"Load a dataset from disk. This is a factory method that can read the dataset from different formats, when the dataset is already in a local directory. Args: dataset_format: Format of the dataset. Currently supported values and formats: - \"coco\": COCO format path: Path to the dataset on the local filesystem. **kwargs: Keyword arguments specific to the dataset_format. Returns: A DetectionDataset instance containing the loaded data. \"\"\" reader = reader_factory . get ( dataset_format = dataset_format , path = path , ** kwargs ) data = reader . read () self . _concat ( other_data = data ) return self from_hub ( dataset_name , repo_name = ORGANISATION , in_memory = False ) # Load a dataset from the Hugging Face Hub. Currently only datasets from the 'detection-datasets' organisation can be loaded. Parameters: Name Type Description Default name name of the dataset, without the organisation's prefix. required in_memory bool whether to keep the images in memory. Set to False if the system runs out of memory, then the images will be downloaded and only the path to these images will be saved in the data. Defaults to True. False Returns: Type Description DetectionDataset A DetectionDataset instance containing the loaded data. Source code in detection_datasets/detection_dataset.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def from_hub ( self , dataset_name : str , repo_name : str = ORGANISATION , in_memory : bool = False ) -> DetectionDataset : \"\"\"Load a dataset from the Hugging Face Hub. Currently only datasets from the 'detection-datasets' organisation can be loaded. Args: name: name of the dataset, without the organisation's prefix. in_memory: whether to keep the images in memory. Set to False if the system runs out of memory, then the images will be downloaded and only the path to these images will be saved in the data. Defaults to True. Returns: A DetectionDataset instance containing the loaded data. \"\"\" if dataset_name not in self . available_in_hub ( repo_name = repo_name ): raise ValueError ( f \"\"\" { dataset_name } is not available on the Hub. Use `DetectionDataset.available_in_hub() to get the list of available datasets.\"\"\" ) path = \"/\" . join ([ repo_name , dataset_name ]) ds = load_dataset ( path = path ) categories = ds [ list ( ds . keys ())[ 0 ]] . features [ \"objects\" ] . feature [ \"category\" ] if not in_memory : DOWNLOAD_PATH = Path . home () / CACHE_DIR DOWNLOAD_PATH . mkdir ( parents = True , exist_ok = True ) def download_images ( row ): file_path = \"\" . join ([ DOWNLOAD_PATH . as_posix (), \"/\" , str ( row [ \"image_id\" ]), \".jpg\" ]) row [ \"image\" ] . save ( file_path ) row [ \"image_path\" ] = file_path return row ds = ds . map ( download_images , remove_columns = \"image\" , load_from_cache_file = False , desc = \"Moving images from memory to disk\" , ) df_splits = [] for key in ds . keys (): df_split = ds [ key ] . to_pandas () df_split [ \"split\" ] = key df_splits . append ( df_split ) df = pd . concat ( df_splits ) df = df . reset_index ( drop = True ) objects = pd . json_normalize ( df [ \"objects\" ]) data = df . join ( objects ) if \"image_path\" not in data . columns : data [ \"image_path\" ] = [ x [ \"bytes\" ] for x in data . loc [:, \"image\" ]] data = data . drop ( columns = [ \"objects\" , \"image\" ], errors = \"ignore\" ) data [ \"category_id\" ] = data . loc [:, \"category\" ] data [ \"category\" ] = [[ categories . int2str ( int ( x )) for x in row [ \"category\" ]] for _ , row in data . iterrows ()] data = data . explode ([ \"bbox_id\" , \"category_id\" , \"category\" , \"bbox\" , \"area\" ]) data [ \"bbox\" ] = [ Bbox . from_voc ( row . bbox , row . width , row . height , row . bbox_id ) for _ , row in data . iterrows ()] self . _concat ( other_data = data ) return self get_data ( index = 'image' ) # Getter for the data, with the possibility to specify the format. Source code in detection_datasets/detection_dataset.py 57 58 59 60 61 62 def get_data ( self , index : str = \"image\" ) -> pd . DataFrame : \"\"\"Getter for the data, with the possibility to specify the format.\"\"\" data = self . set_format ( index = index ) return data get_hf_dataset () # Get the data formatted as an Hugging Face DatasetDict instance. The DatasetDict contains a Dataset for each split present in the data. All methods and properties of the DatasetDict can then be used. Returns: Type Description DatasetDict Data formatted as an Hugging Face DatasetDict instance Source code in detection_datasets/detection_dataset.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def get_hf_dataset ( self ) -> DatasetDict : \"\"\"Get the data formatted as an Hugging Face DatasetDict instance. The DatasetDict contains a Dataset for each split present in the data. All methods and properties of the DatasetDict can then be used. Returns: Data formatted as an Hugging Face DatasetDict instance \"\"\" data = self . set_format ( index = \"image\" ) . reset_index () data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in data . bbox ] hf_dataset_dict = DatasetDict () for split in self . splits : split_data = data [ data . split == split ] images_data = [] for _ , row in split_data . iterrows (): objects = {} objects [ \"bbox_id\" ] = row [ \"bbox_id\" ] objects [ \"category\" ] = row [ \"category\" ] objects [ \"bbox\" ] = row [ \"bbox\" ] objects [ \"area\" ] = row [ \"area\" ] image = {} image [ \"image_id\" ] = row [ \"image_id\" ] image [ \"image\" ] = row [ \"image_path\" ] image [ \"width\" ] = row [ \"width\" ] image [ \"height\" ] = row [ \"height\" ] image [ \"objects\" ] = objects images_data . append ( image ) df = pd . DataFrame . from_dict ( images_data ) features = Features ( { \"image_id\" : Value ( dtype = \"int64\" ), \"image\" : Image ( decode = True ), \"width\" : Value ( dtype = \"int64\" ), \"height\" : Value ( dtype = \"int64\" ), \"objects\" : Sequence ( { \"bbox_id\" : Value ( dtype = \"int64\" ), \"category\" : ClassLabel ( names = self . category_names ), \"bbox\" : Sequence ( feature = Value ( dtype = \"float64\" ), length = 4 ), \"area\" : Value ( dtype = \"int64\" ), } ), } ) ds = Dataset . from_pandas ( df = df , features = features , split = split ) hf_dataset_dict [ split ] = ds return hf_dataset_dict map_categories ( mapping ) # Maps the categories to the new categories. The new categoy names replace the existing ones. Annotations with categories not present in the mapping are dropped. The new category_ids correspond the the rank of the new categories in alphabetical order. Parameters: Name Type Description Default mapping dict [ str , str ] A dictionnary mapping original categories to new categories. required Source code in detection_datasets/detection_dataset.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def map_categories ( self , mapping : dict [ str , str ]) -> DetectionDataset : \"\"\"Maps the categories to the new categories. The new categoy names replace the existing ones. Annotations with categories not present in the mapping are dropped. The new category_ids correspond the the rank of the new categories in alphabetical order. Args: mapping: A dictionnary mapping original categories to new categories. \"\"\" data = self . set_format ( index = \"bbox\" ) . reset_index () data [ \"category\" ] = data . loc [:, \"category\" ] . map ( mapping ) data = data [ ~ data . category . isna ()] categories = sorted ( data . category . unique ()) data [ \"category_id\" ] = data . loc [:, \"category\" ] . apply ( lambda cat : categories . index ( cat )) self . _data = data . set_index ([ \"image_id\" , \"bbox_id\" ]) return self n_bbox () property # Returns the number of images in the dataset. Returns: Type Description int The number of images in the dataset. Source code in detection_datasets/detection_dataset.py 473 474 475 476 477 478 479 480 481 482 483 @property def n_bbox ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"bbox\" ) return len ( data ) n_categories () property # Returns the number of categories. Returns: Type Description int The number of categories. Source code in detection_datasets/detection_dataset.py 531 532 533 534 535 536 537 538 539 @property def n_categories ( self ) -> int : \"\"\"Returns the number of categories. Returns: The number of categories. \"\"\" return self . categories [ \"category\" ] . nunique () n_images () property # Returns the number of images in the dataset. Returns: Type Description int The number of images in the dataset. Source code in detection_datasets/detection_dataset.py 461 462 463 464 465 466 467 468 469 470 471 @property def n_images ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"image\" ) return len ( data ) select ( n_images , seed = 42 ) # Limits the number of images to n_images. Parameters: Name Type Description Default n_images int Number of images to include in the dataset. The original proportion of images between splits will be respected. required seed int Random seed. 42 Source code in detection_datasets/detection_dataset.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 def select ( self , n_images : int , seed : int = 42 ) -> DetectionDataset : \"\"\"Limits the number of images to n_images. Args: n_images: Number of images to include in the dataset. The original proportion of images between splits will be respected. seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) if self . n_images > len ( data_by_image ): raise ValueError ( \"The number of images to include in the dataset is greater than the number of existing images.\" ) split_data = [] for split in Split : sample_size = int ( n_images * self . split_proportions [ split . value ]) split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( n = sample_size , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self show ( image_id = None ) # Show the image with bounding boxes and labels. Parameters: Name Type Description Default image_id int Id of the image. If not provided, a random image is selected. Defaults to None. None Returns: Type Description PILImage Image with bounding boxes and labels. Source code in detection_datasets/detection_dataset.py 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def show ( self , image_id : int = None ) -> PILImage : \"\"\"Show the image with bounding boxes and labels. Args: image_id: Id of the image. If not provided, a random image is selected. Defaults to None. Returns: Image with bounding boxes and labels. \"\"\" data = self . set_format ( index = \"bbox\" ) if image_id is None : index = np . random . randint ( 0 , len ( data )) image_id = data . reset_index () . iloc [ index ][ \"image_id\" ] rows = data . loc [ image_id ] image = show_image_bbox ( rows = rows ) return image shuffle ( seed = 42 ) # Shuffles the dataset. Parameters: Name Type Description Default seed int Random seed. 42 Source code in detection_datasets/detection_dataset.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 def shuffle ( self , seed : int = 42 ) -> DetectionDataset : \"\"\"Shuffles the dataset. Args: seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) split_data = [] for split in Split : split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( frac = 1 , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self split ( splits ) # Splits the dataset into train, val and test. Parameters: Name Type Description Default splits Iterable [ float ] Iterable containing the proportion of images to include in the train, val and test splits. The sum of the values in the iterable must be equal to 1. The original splits will be overwritten. required Source code in detection_datasets/detection_dataset.py 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def split ( self , splits : Iterable [ float ]) -> DetectionDataset : \"\"\"Splits the dataset into train, val and test. Args: splits: Iterable containing the proportion of images to include in the train, val and test splits. The sum of the values in the iterable must be equal to 1. The original splits will be overwritten. \"\"\" if len ( splits ) != 3 : raise ValueError ( \"The splits must contain 3 elements.\" ) if sum ( splits ) != 1 : raise ValueError ( f \"The sum of the proportion for each split must be equal to 1, here it is: { sum ( splits ) } .\" ) data_by_image = self . set_format ( index = \"image\" ) n_train = int ( splits [ 0 ] * len ( data_by_image )) n_val = int ( n_train + splits [ 1 ] * len ( data_by_image )) n_test = int ( n_val + splits [ 2 ] * len ( data_by_image )) data_by_image = data_by_image . sample ( frac = 1 , random_state = 42 ) data_train , data_val , data_test , _ = np . split ( data_by_image , [ n_train , n_val , n_test ]) data_train [ \"split\" ] = Split . TRAIN . value data_val [ \"split\" ] = Split . VAL . value data_test [ \"split\" ] = Split . TEST . value self . _data = pd . concat ([ data_train , data_val , data_test ]) return self split_proportions () property # Returns the proportion of images in the train, val and test splits. Returns: Type Description pd . DataFrame The proportion of images in the train, val and test splits. Source code in detection_datasets/detection_dataset.py 495 496 497 498 499 500 501 502 503 504 505 @property def split_proportions ( self ) -> pd . DataFrame : \"\"\"Returns the proportion of images in the train, val and test splits. Returns: The proportion of images in the train, val and test splits. \"\"\" data = self . set_format ( index = \"image\" ) return pd . DataFrame ({ s . value : [ len ( data [ data . split == s . value ]) / len ( data )] for s in Split }) splits () property # Returns the splits of the dataset. Returns: Type Description list [ str ] The splits present in the dataset. Source code in detection_datasets/detection_dataset.py 485 486 487 488 489 490 491 492 493 @property def splits ( self ) -> list [ str ]: \"\"\"Returns the splits of the dataset. Returns: The splits present in the dataset. \"\"\" return self . _data . split . unique () . tolist () to_disk ( dataset_format , name , absolute_path ) # Write the dataset to disk. This is a factory method that can write the dataset to disk in the selected format (e.g. COCO, MMDET, YOLO) Parameters: Name Type Description Default dataset_format str Format of the dataset. Currently supported formats: - \"yolo\": YOLO format - \"mmdet\": MMDET internal format, see: https://mmdetection.readthedocs.io/en/latest/tutorials/customize_dataset.html#reorganize-new-data-format-to-middle-format required name str Name of the dataset to be created in the \"path\" directory. required absolute_path str Absolute path to the directory where the dataset will be created. required **kwargs Keyword arguments specific to the dataset_format. required Source code in detection_datasets/detection_dataset.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 def to_disk ( self , dataset_format : str , name : str , absolute_path : str ) -> DetectionDataset : \"\"\"Write the dataset to disk. This is a factory method that can write the dataset to disk in the selected format (e.g. COCO, MMDET, YOLO) Args: dataset_format: Format of the dataset. Currently supported formats: - \"yolo\": YOLO format - \"mmdet\": MMDET internal format, see: https://mmdetection.readthedocs.io/en/latest/tutorials/customize_dataset.html#reorganize-new-data-format-to-middle-format name: Name of the dataset to be created in the \"path\" directory. absolute_path: Absolute path to the directory where the dataset will be created. **kwargs: Keyword arguments specific to the dataset_format. \"\"\" writer = writer_factory . get ( dataset_format = dataset_format , dataset = self , name = name , path = absolute_path ) writer . write () return self to_hub ( dataset_name , repo_name , ** kwargs ) # Push the dataset to the hub as a Parquet dataset. This method wraps Hugging Face's DatasetDict.push_to_hub() method. The dataset is pushed as a DatasetDict, meaning the each split (train, val, test), if present, will be a separate Dataset instance inside this DatasetDict. Parameters: Name Type Description Default dataset_name str name of the dataset inside the user/organisation's repository. required repo_name str user of organisation to push the dataset to. required Source code in detection_datasets/detection_dataset.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def to_hub ( self , dataset_name : str , repo_name : str , ** kwargs ) -> DetectionDataset : \"\"\"Push the dataset to the hub as a Parquet dataset. This method wraps Hugging Face's DatasetDict.push_to_hub() method. The dataset is pushed as a DatasetDict, meaning the each split (train, val, test), if present, will be a separate Dataset instance inside this DatasetDict. Args: dataset_name: name of the dataset inside the user/organisation's repository. repo_name: user of organisation to push the dataset to. \"\"\" repo_id = \"/\" . join ([ repo_name , dataset_name ]) hf_dataset_dict = self . get_hf_dataset () hf_dataset_dict . push_to_hub ( repo_id = repo_id , ** kwargs ) return self","title":"DetectionDataset"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.__init__","text":"Initialize the dataset. Don't call the constructr directly, use from_hub() or from_disk() methods instead. Source code in detection_datasets/detection_dataset.py 40 41 42 43 44 45 46 47 48 49 def __init__ ( self , data : pd . DataFrame = None ) -> None : \"\"\"Initialize the dataset. Don't call the constructr directly, use `from_hub()` or `from_disk()` methods instead. \"\"\" self . _format = \"init\" if data is not None : self . _concat ( data )","title":"__init__()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.available_in_hub","text":"List the datasets available in the Hugging Face Hub. Parameters: Name Type Description Default repo_name str user or organisation where the dataset is stored on the Hub. ORGANISATION Returns: Type Description list [ str ] List of names of datasets registered in the Hugging Face Hub, under the 'detection-datasets' organisation. Source code in detection_datasets/detection_dataset.py 145 146 147 148 149 150 151 152 153 154 155 156 157 def available_in_hub ( self , repo_name : str = ORGANISATION ) -> list [ str ]: \"\"\"List the datasets available in the Hugging Face Hub. Args: repo_name: user or organisation where the dataset is stored on the Hub. Returns: List of names of datasets registered in the Hugging Face Hub, under the 'detection-datasets' organisation. \"\"\" datasets = api . list_datasets ( author = repo_name ) return [ dataset . id . split ( \"/\" )[ - 1 ] for dataset in datasets ]","title":"available_in_hub()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.categories","text":"Creates a DataFrame containing the categories found in the data with their id. Source code in detection_datasets/detection_dataset.py 507 508 509 510 511 512 513 514 515 516 517 518 519 @property def categories ( self ) -> pd . DataFrame : \"\"\"Creates a DataFrame containing the categories found in the data with their id.\"\"\" data = self . set_format ( index = \"bbox\" ) return ( data . loc [:, [ \"category_id\" , \"category\" ]] . drop_duplicates () . astype ({ \"category_id\" : int , \"category\" : \"object\" }) . sort_values ( \"category_id\" ) . set_index ( \"category_id\" ) )","title":"categories()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.category_names","text":"Returns the categories names. Returns: Type Description list [ str ] The categories names. Source code in detection_datasets/detection_dataset.py 521 522 523 524 525 526 527 528 529 @property def category_names ( self ) -> list [ str ]: \"\"\"Returns the categories names. Returns: The categories names. \"\"\" return list ( self . categories [ \"category\" ] . unique ())","title":"category_names()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.data","text":"Getter for the data, with annotations grouped by images. Source code in detection_datasets/detection_dataset.py 51 52 53 54 55 @property def data ( self ) -> pd . DataFrame : \"\"\"Getter for the data, with annotations grouped by images.\"\"\" return self . get_data ()","title":"data()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.format","text":"Getter for the current format of the data (\"image\" or \"bbox\"). Source code in detection_datasets/detection_dataset.py 64 65 66 67 68 @property def format ( self ) -> str : \"\"\"Getter for the current format of the data (\"image\" or \"bbox\").\"\"\" return self . _format","title":"format()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.from_disk","text":"Load a dataset from disk. This is a factory method that can read the dataset from different formats, when the dataset is already in a local directory. Parameters: Name Type Description Default dataset_format str Format of the dataset. Currently supported values and formats: - \"coco\": COCO format required path str Path to the dataset on the local filesystem. required **kwargs Keyword arguments specific to the dataset_format. {} Returns: Type Description DetectionDataset A DetectionDataset instance containing the loaded data. Source code in detection_datasets/detection_dataset.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def from_disk ( self , dataset_format : str , path : str , ** kwargs ) -> DetectionDataset : \"\"\"Load a dataset from disk. This is a factory method that can read the dataset from different formats, when the dataset is already in a local directory. Args: dataset_format: Format of the dataset. Currently supported values and formats: - \"coco\": COCO format path: Path to the dataset on the local filesystem. **kwargs: Keyword arguments specific to the dataset_format. Returns: A DetectionDataset instance containing the loaded data. \"\"\" reader = reader_factory . get ( dataset_format = dataset_format , path = path , ** kwargs ) data = reader . read () self . _concat ( other_data = data ) return self","title":"from_disk()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.from_hub","text":"Load a dataset from the Hugging Face Hub. Currently only datasets from the 'detection-datasets' organisation can be loaded. Parameters: Name Type Description Default name name of the dataset, without the organisation's prefix. required in_memory bool whether to keep the images in memory. Set to False if the system runs out of memory, then the images will be downloaded and only the path to these images will be saved in the data. Defaults to True. False Returns: Type Description DetectionDataset A DetectionDataset instance containing the loaded data. Source code in detection_datasets/detection_dataset.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def from_hub ( self , dataset_name : str , repo_name : str = ORGANISATION , in_memory : bool = False ) -> DetectionDataset : \"\"\"Load a dataset from the Hugging Face Hub. Currently only datasets from the 'detection-datasets' organisation can be loaded. Args: name: name of the dataset, without the organisation's prefix. in_memory: whether to keep the images in memory. Set to False if the system runs out of memory, then the images will be downloaded and only the path to these images will be saved in the data. Defaults to True. Returns: A DetectionDataset instance containing the loaded data. \"\"\" if dataset_name not in self . available_in_hub ( repo_name = repo_name ): raise ValueError ( f \"\"\" { dataset_name } is not available on the Hub. Use `DetectionDataset.available_in_hub() to get the list of available datasets.\"\"\" ) path = \"/\" . join ([ repo_name , dataset_name ]) ds = load_dataset ( path = path ) categories = ds [ list ( ds . keys ())[ 0 ]] . features [ \"objects\" ] . feature [ \"category\" ] if not in_memory : DOWNLOAD_PATH = Path . home () / CACHE_DIR DOWNLOAD_PATH . mkdir ( parents = True , exist_ok = True ) def download_images ( row ): file_path = \"\" . join ([ DOWNLOAD_PATH . as_posix (), \"/\" , str ( row [ \"image_id\" ]), \".jpg\" ]) row [ \"image\" ] . save ( file_path ) row [ \"image_path\" ] = file_path return row ds = ds . map ( download_images , remove_columns = \"image\" , load_from_cache_file = False , desc = \"Moving images from memory to disk\" , ) df_splits = [] for key in ds . keys (): df_split = ds [ key ] . to_pandas () df_split [ \"split\" ] = key df_splits . append ( df_split ) df = pd . concat ( df_splits ) df = df . reset_index ( drop = True ) objects = pd . json_normalize ( df [ \"objects\" ]) data = df . join ( objects ) if \"image_path\" not in data . columns : data [ \"image_path\" ] = [ x [ \"bytes\" ] for x in data . loc [:, \"image\" ]] data = data . drop ( columns = [ \"objects\" , \"image\" ], errors = \"ignore\" ) data [ \"category_id\" ] = data . loc [:, \"category\" ] data [ \"category\" ] = [[ categories . int2str ( int ( x )) for x in row [ \"category\" ]] for _ , row in data . iterrows ()] data = data . explode ([ \"bbox_id\" , \"category_id\" , \"category\" , \"bbox\" , \"area\" ]) data [ \"bbox\" ] = [ Bbox . from_voc ( row . bbox , row . width , row . height , row . bbox_id ) for _ , row in data . iterrows ()] self . _concat ( other_data = data ) return self","title":"from_hub()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.get_data","text":"Getter for the data, with the possibility to specify the format. Source code in detection_datasets/detection_dataset.py 57 58 59 60 61 62 def get_data ( self , index : str = \"image\" ) -> pd . DataFrame : \"\"\"Getter for the data, with the possibility to specify the format.\"\"\" data = self . set_format ( index = index ) return data","title":"get_data()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.get_hf_dataset","text":"Get the data formatted as an Hugging Face DatasetDict instance. The DatasetDict contains a Dataset for each split present in the data. All methods and properties of the DatasetDict can then be used. Returns: Type Description DatasetDict Data formatted as an Hugging Face DatasetDict instance Source code in detection_datasets/detection_dataset.py 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def get_hf_dataset ( self ) -> DatasetDict : \"\"\"Get the data formatted as an Hugging Face DatasetDict instance. The DatasetDict contains a Dataset for each split present in the data. All methods and properties of the DatasetDict can then be used. Returns: Data formatted as an Hugging Face DatasetDict instance \"\"\" data = self . set_format ( index = \"image\" ) . reset_index () data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in data . bbox ] hf_dataset_dict = DatasetDict () for split in self . splits : split_data = data [ data . split == split ] images_data = [] for _ , row in split_data . iterrows (): objects = {} objects [ \"bbox_id\" ] = row [ \"bbox_id\" ] objects [ \"category\" ] = row [ \"category\" ] objects [ \"bbox\" ] = row [ \"bbox\" ] objects [ \"area\" ] = row [ \"area\" ] image = {} image [ \"image_id\" ] = row [ \"image_id\" ] image [ \"image\" ] = row [ \"image_path\" ] image [ \"width\" ] = row [ \"width\" ] image [ \"height\" ] = row [ \"height\" ] image [ \"objects\" ] = objects images_data . append ( image ) df = pd . DataFrame . from_dict ( images_data ) features = Features ( { \"image_id\" : Value ( dtype = \"int64\" ), \"image\" : Image ( decode = True ), \"width\" : Value ( dtype = \"int64\" ), \"height\" : Value ( dtype = \"int64\" ), \"objects\" : Sequence ( { \"bbox_id\" : Value ( dtype = \"int64\" ), \"category\" : ClassLabel ( names = self . category_names ), \"bbox\" : Sequence ( feature = Value ( dtype = \"float64\" ), length = 4 ), \"area\" : Value ( dtype = \"int64\" ), } ), } ) ds = Dataset . from_pandas ( df = df , features = features , split = split ) hf_dataset_dict [ split ] = ds return hf_dataset_dict","title":"get_hf_dataset()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.map_categories","text":"Maps the categories to the new categories. The new categoy names replace the existing ones. Annotations with categories not present in the mapping are dropped. The new category_ids correspond the the rank of the new categories in alphabetical order. Parameters: Name Type Description Default mapping dict [ str , str ] A dictionnary mapping original categories to new categories. required Source code in detection_datasets/detection_dataset.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def map_categories ( self , mapping : dict [ str , str ]) -> DetectionDataset : \"\"\"Maps the categories to the new categories. The new categoy names replace the existing ones. Annotations with categories not present in the mapping are dropped. The new category_ids correspond the the rank of the new categories in alphabetical order. Args: mapping: A dictionnary mapping original categories to new categories. \"\"\" data = self . set_format ( index = \"bbox\" ) . reset_index () data [ \"category\" ] = data . loc [:, \"category\" ] . map ( mapping ) data = data [ ~ data . category . isna ()] categories = sorted ( data . category . unique ()) data [ \"category_id\" ] = data . loc [:, \"category\" ] . apply ( lambda cat : categories . index ( cat )) self . _data = data . set_index ([ \"image_id\" , \"bbox_id\" ]) return self","title":"map_categories()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.n_bbox","text":"Returns the number of images in the dataset. Returns: Type Description int The number of images in the dataset. Source code in detection_datasets/detection_dataset.py 473 474 475 476 477 478 479 480 481 482 483 @property def n_bbox ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"bbox\" ) return len ( data )","title":"n_bbox()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.n_categories","text":"Returns the number of categories. Returns: Type Description int The number of categories. Source code in detection_datasets/detection_dataset.py 531 532 533 534 535 536 537 538 539 @property def n_categories ( self ) -> int : \"\"\"Returns the number of categories. Returns: The number of categories. \"\"\" return self . categories [ \"category\" ] . nunique ()","title":"n_categories()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.n_images","text":"Returns the number of images in the dataset. Returns: Type Description int The number of images in the dataset. Source code in detection_datasets/detection_dataset.py 461 462 463 464 465 466 467 468 469 470 471 @property def n_images ( self ) -> int : \"\"\"Returns the number of images in the dataset. Returns: The number of images in the dataset. \"\"\" data = self . set_format ( index = \"image\" ) return len ( data )","title":"n_images()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.select","text":"Limits the number of images to n_images. Parameters: Name Type Description Default n_images int Number of images to include in the dataset. The original proportion of images between splits will be respected. required seed int Random seed. 42 Source code in detection_datasets/detection_dataset.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 def select ( self , n_images : int , seed : int = 42 ) -> DetectionDataset : \"\"\"Limits the number of images to n_images. Args: n_images: Number of images to include in the dataset. The original proportion of images between splits will be respected. seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) if self . n_images > len ( data_by_image ): raise ValueError ( \"The number of images to include in the dataset is greater than the number of existing images.\" ) split_data = [] for split in Split : sample_size = int ( n_images * self . split_proportions [ split . value ]) split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( n = sample_size , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self","title":"select()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.show","text":"Show the image with bounding boxes and labels. Parameters: Name Type Description Default image_id int Id of the image. If not provided, a random image is selected. Defaults to None. None Returns: Type Description PILImage Image with bounding boxes and labels. Source code in detection_datasets/detection_dataset.py 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def show ( self , image_id : int = None ) -> PILImage : \"\"\"Show the image with bounding boxes and labels. Args: image_id: Id of the image. If not provided, a random image is selected. Defaults to None. Returns: Image with bounding boxes and labels. \"\"\" data = self . set_format ( index = \"bbox\" ) if image_id is None : index = np . random . randint ( 0 , len ( data )) image_id = data . reset_index () . iloc [ index ][ \"image_id\" ] rows = data . loc [ image_id ] image = show_image_bbox ( rows = rows ) return image","title":"show()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.shuffle","text":"Shuffles the dataset. Parameters: Name Type Description Default seed int Random seed. 42 Source code in detection_datasets/detection_dataset.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 def shuffle ( self , seed : int = 42 ) -> DetectionDataset : \"\"\"Shuffles the dataset. Args: seed: Random seed. \"\"\" data_by_image = self . set_format ( index = \"image\" ) split_data = [] for split in Split : split_data . append ( data_by_image . loc [ data_by_image . split == split . value , :] . sample ( frac = 1 , random_state = seed ) ) self . _data = pd . concat ( split_data ) return self","title":"shuffle()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.split","text":"Splits the dataset into train, val and test. Parameters: Name Type Description Default splits Iterable [ float ] Iterable containing the proportion of images to include in the train, val and test splits. The sum of the values in the iterable must be equal to 1. The original splits will be overwritten. required Source code in detection_datasets/detection_dataset.py 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def split ( self , splits : Iterable [ float ]) -> DetectionDataset : \"\"\"Splits the dataset into train, val and test. Args: splits: Iterable containing the proportion of images to include in the train, val and test splits. The sum of the values in the iterable must be equal to 1. The original splits will be overwritten. \"\"\" if len ( splits ) != 3 : raise ValueError ( \"The splits must contain 3 elements.\" ) if sum ( splits ) != 1 : raise ValueError ( f \"The sum of the proportion for each split must be equal to 1, here it is: { sum ( splits ) } .\" ) data_by_image = self . set_format ( index = \"image\" ) n_train = int ( splits [ 0 ] * len ( data_by_image )) n_val = int ( n_train + splits [ 1 ] * len ( data_by_image )) n_test = int ( n_val + splits [ 2 ] * len ( data_by_image )) data_by_image = data_by_image . sample ( frac = 1 , random_state = 42 ) data_train , data_val , data_test , _ = np . split ( data_by_image , [ n_train , n_val , n_test ]) data_train [ \"split\" ] = Split . TRAIN . value data_val [ \"split\" ] = Split . VAL . value data_test [ \"split\" ] = Split . TEST . value self . _data = pd . concat ([ data_train , data_val , data_test ]) return self","title":"split()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.split_proportions","text":"Returns the proportion of images in the train, val and test splits. Returns: Type Description pd . DataFrame The proportion of images in the train, val and test splits. Source code in detection_datasets/detection_dataset.py 495 496 497 498 499 500 501 502 503 504 505 @property def split_proportions ( self ) -> pd . DataFrame : \"\"\"Returns the proportion of images in the train, val and test splits. Returns: The proportion of images in the train, val and test splits. \"\"\" data = self . set_format ( index = \"image\" ) return pd . DataFrame ({ s . value : [ len ( data [ data . split == s . value ]) / len ( data )] for s in Split })","title":"split_proportions()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.splits","text":"Returns the splits of the dataset. Returns: Type Description list [ str ] The splits present in the dataset. Source code in detection_datasets/detection_dataset.py 485 486 487 488 489 490 491 492 493 @property def splits ( self ) -> list [ str ]: \"\"\"Returns the splits of the dataset. Returns: The splits present in the dataset. \"\"\" return self . _data . split . unique () . tolist ()","title":"splits()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.to_disk","text":"Write the dataset to disk. This is a factory method that can write the dataset to disk in the selected format (e.g. COCO, MMDET, YOLO) Parameters: Name Type Description Default dataset_format str Format of the dataset. Currently supported formats: - \"yolo\": YOLO format - \"mmdet\": MMDET internal format, see: https://mmdetection.readthedocs.io/en/latest/tutorials/customize_dataset.html#reorganize-new-data-format-to-middle-format required name str Name of the dataset to be created in the \"path\" directory. required absolute_path str Absolute path to the directory where the dataset will be created. required **kwargs Keyword arguments specific to the dataset_format. required Source code in detection_datasets/detection_dataset.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 def to_disk ( self , dataset_format : str , name : str , absolute_path : str ) -> DetectionDataset : \"\"\"Write the dataset to disk. This is a factory method that can write the dataset to disk in the selected format (e.g. COCO, MMDET, YOLO) Args: dataset_format: Format of the dataset. Currently supported formats: - \"yolo\": YOLO format - \"mmdet\": MMDET internal format, see: https://mmdetection.readthedocs.io/en/latest/tutorials/customize_dataset.html#reorganize-new-data-format-to-middle-format name: Name of the dataset to be created in the \"path\" directory. absolute_path: Absolute path to the directory where the dataset will be created. **kwargs: Keyword arguments specific to the dataset_format. \"\"\" writer = writer_factory . get ( dataset_format = dataset_format , dataset = self , name = name , path = absolute_path ) writer . write () return self","title":"to_disk()"},{"location":"reference/detection_dataset/#detection_datasets.detection_dataset.DetectionDataset.to_hub","text":"Push the dataset to the hub as a Parquet dataset. This method wraps Hugging Face's DatasetDict.push_to_hub() method. The dataset is pushed as a DatasetDict, meaning the each split (train, val, test), if present, will be a separate Dataset instance inside this DatasetDict. Parameters: Name Type Description Default dataset_name str name of the dataset inside the user/organisation's repository. required repo_name str user of organisation to push the dataset to. required Source code in detection_datasets/detection_dataset.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def to_hub ( self , dataset_name : str , repo_name : str , ** kwargs ) -> DetectionDataset : \"\"\"Push the dataset to the hub as a Parquet dataset. This method wraps Hugging Face's DatasetDict.push_to_hub() method. The dataset is pushed as a DatasetDict, meaning the each split (train, val, test), if present, will be a separate Dataset instance inside this DatasetDict. Args: dataset_name: name of the dataset inside the user/organisation's repository. repo_name: user of organisation to push the dataset to. \"\"\" repo_id = \"/\" . join ([ repo_name , dataset_name ]) hf_dataset_dict = self . get_hf_dataset () hf_dataset_dict . push_to_hub ( repo_id = repo_id , ** kwargs ) return self","title":"to_hub()"},{"location":"reference/readers/","text":"Bases: ABC Source code in detection_datasets/readers/base.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class BaseReader ( ABC ): def __init__ ( self , path : str ) -> None : \"\"\"Base class for loading datasets in memory. Args: path: Path to the dataset \"\"\" self . path = path @abstractmethod def read ( self ) -> pd . DataFrame : \"\"\"Read a dataset from disk. Returns: A pandas DataFrame containing the data loaded. \"\"\" __init__ ( path ) # Base class for loading datasets in memory. Parameters: Name Type Description Default path str Path to the dataset required Source code in detection_datasets/readers/base.py 7 8 9 10 11 12 13 14 def __init__ ( self , path : str ) -> None : \"\"\"Base class for loading datasets in memory. Args: path: Path to the dataset \"\"\" self . path = path read () abstractmethod # Read a dataset from disk. Returns: Type Description pd . DataFrame A pandas DataFrame containing the data loaded. Source code in detection_datasets/readers/base.py 16 17 18 19 20 21 22 @abstractmethod def read ( self ) -> pd . DataFrame : \"\"\"Read a dataset from disk. Returns: A pandas DataFrame containing the data loaded. \"\"\" Bases: BaseReader Source code in detection_datasets/readers/coco.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class CocoReader ( BaseReader ): def __init__ ( self , path : str , splits : Dict [ str , Tuple [ str , str ]]) -> None : super () . __init__ ( path ) self . splits = splits def read ( self ) -> pd . DataFrame (): annotation_dataframes = [] for split , ( annotation_file , images_dir ) in self . splits . items (): images_path_prefix = os . path . join ( self . path , images_dir ) json = self . _read_json ( self . path , annotation_file ) annotation_dataframe = self . _read_annotations ( json_data = json ) annotation_dataframe [ \"image_path\" ] = annotation_dataframe [ \"image_name\" ] . apply ( lambda x : os . path . join ( images_path_prefix , x ) ) annotation_dataframe [ \"split\" ] = split annotation_dataframes . append ( annotation_dataframe ) annotation_by_bbox = pd . concat ( annotation_dataframes , axis = 0 , ignore_index = True ) annotation_by_bbox [ \"bbox\" ] = [ Bbox . from_coco ( row . bbox , row . width , row . height , row . bbox_id ) for _ , row in annotation_by_bbox . iterrows () ] return annotation_by_bbox @staticmethod def _read_json ( path : str , file : str ) -> json : path_to_file = os . path . join ( path , file ) with open ( path_to_file ) as f : return json . load ( f ) def _read_annotations ( self , json_data : json ) -> pd . DataFrame : annotations = pd . DataFrame ( json_data [ \"annotations\" ]) annotations = annotations [[ \"image_id\" , \"category_id\" , \"bbox\" , \"area\" , \"id\" ]] annotations = annotations . rename ( columns = { \"id\" : \"bbox_id\" }) images = pd . DataFrame ( json_data [ \"images\" ]) images = images [[ \"id\" , \"file_name\" , \"height\" , \"width\" ]] images = images . rename ( columns = { \"id\" : \"image_id\" , \"file_name\" : \"image_name\" }) categories = pd . DataFrame ( json_data [ \"categories\" ]) categories = categories [[ \"id\" , \"name\" ]] categories = categories . rename ( columns = { \"id\" : \"category_id\" , \"name\" : \"category\" }) categories = categories . sort_values ( \"category_id\" ) self . categories = list ( categories . category . unique ()) data = pd . merge ( annotations , images , on = \"image_id\" , how = \"left\" ) data = pd . merge ( data , categories , on = \"category_id\" , how = \"left\" ) return data","title":"Readers"},{"location":"reference/readers/#detection_datasets.readers.base.BaseReader.__init__","text":"Base class for loading datasets in memory. Parameters: Name Type Description Default path str Path to the dataset required Source code in detection_datasets/readers/base.py 7 8 9 10 11 12 13 14 def __init__ ( self , path : str ) -> None : \"\"\"Base class for loading datasets in memory. Args: path: Path to the dataset \"\"\" self . path = path","title":"__init__()"},{"location":"reference/readers/#detection_datasets.readers.base.BaseReader.read","text":"Read a dataset from disk. Returns: Type Description pd . DataFrame A pandas DataFrame containing the data loaded. Source code in detection_datasets/readers/base.py 16 17 18 19 20 21 22 @abstractmethod def read ( self ) -> pd . DataFrame : \"\"\"Read a dataset from disk. Returns: A pandas DataFrame containing the data loaded. \"\"\" Bases: BaseReader Source code in detection_datasets/readers/coco.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class CocoReader ( BaseReader ): def __init__ ( self , path : str , splits : Dict [ str , Tuple [ str , str ]]) -> None : super () . __init__ ( path ) self . splits = splits def read ( self ) -> pd . DataFrame (): annotation_dataframes = [] for split , ( annotation_file , images_dir ) in self . splits . items (): images_path_prefix = os . path . join ( self . path , images_dir ) json = self . _read_json ( self . path , annotation_file ) annotation_dataframe = self . _read_annotations ( json_data = json ) annotation_dataframe [ \"image_path\" ] = annotation_dataframe [ \"image_name\" ] . apply ( lambda x : os . path . join ( images_path_prefix , x ) ) annotation_dataframe [ \"split\" ] = split annotation_dataframes . append ( annotation_dataframe ) annotation_by_bbox = pd . concat ( annotation_dataframes , axis = 0 , ignore_index = True ) annotation_by_bbox [ \"bbox\" ] = [ Bbox . from_coco ( row . bbox , row . width , row . height , row . bbox_id ) for _ , row in annotation_by_bbox . iterrows () ] return annotation_by_bbox @staticmethod def _read_json ( path : str , file : str ) -> json : path_to_file = os . path . join ( path , file ) with open ( path_to_file ) as f : return json . load ( f ) def _read_annotations ( self , json_data : json ) -> pd . DataFrame : annotations = pd . DataFrame ( json_data [ \"annotations\" ]) annotations = annotations [[ \"image_id\" , \"category_id\" , \"bbox\" , \"area\" , \"id\" ]] annotations = annotations . rename ( columns = { \"id\" : \"bbox_id\" }) images = pd . DataFrame ( json_data [ \"images\" ]) images = images [[ \"id\" , \"file_name\" , \"height\" , \"width\" ]] images = images . rename ( columns = { \"id\" : \"image_id\" , \"file_name\" : \"image_name\" }) categories = pd . DataFrame ( json_data [ \"categories\" ]) categories = categories [[ \"id\" , \"name\" ]] categories = categories . rename ( columns = { \"id\" : \"category_id\" , \"name\" : \"category\" }) categories = categories . sort_values ( \"category_id\" ) self . categories = list ( categories . category . unique ()) data = pd . merge ( annotations , images , on = \"image_id\" , how = \"left\" ) data = pd . merge ( data , categories , on = \"category_id\" , how = \"left\" ) return data","title":"read()"},{"location":"reference/writers/","text":"Bases: ABC Source code in detection_datasets/writers/base.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class BaseWriter ( ABC ): def __init__ ( self , dataset : DetectionDataset , name : str , path : str , ) -> None : \"\"\"Base class for writing datasets to disk. Args: dataset: Dataframe containing the dataset to write to disk. name: Name of the dataset to be created in the \"path\" directory. path: Path to the directory where the dataset will be created. \"\"\" self . data = dataset . set_format ( index = \"image\" ) . reset_index () self . name = name self . path = path self . dataset_dir = os . path . join ( self . path , self . name ) self . class_names = dataset . category_names self . n_classes = dataset . n_categories self . n_images = dataset . n_images self . split_proportions = dataset . split_proportions @abstractmethod def write ( self ) -> None : \"\"\"Write the dataset to disk. This method is specifc to each format, and need to be implemented in the writer class. \"\"\" __init__ ( dataset , name , path ) # Base class for writing datasets to disk. Parameters: Name Type Description Default dataset DetectionDataset Dataframe containing the dataset to write to disk. required name str Name of the dataset to be created in the \"path\" directory. required path str Path to the directory where the dataset will be created. required Source code in detection_datasets/writers/base.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , dataset : DetectionDataset , name : str , path : str , ) -> None : \"\"\"Base class for writing datasets to disk. Args: dataset: Dataframe containing the dataset to write to disk. name: Name of the dataset to be created in the \"path\" directory. path: Path to the directory where the dataset will be created. \"\"\" self . data = dataset . set_format ( index = \"image\" ) . reset_index () self . name = name self . path = path self . dataset_dir = os . path . join ( self . path , self . name ) self . class_names = dataset . category_names self . n_classes = dataset . n_categories self . n_images = dataset . n_images self . split_proportions = dataset . split_proportions write () abstractmethod # Write the dataset to disk. This method is specifc to each format, and need to be implemented in the writer class. Source code in detection_datasets/writers/base.py 35 36 37 38 39 40 @abstractmethod def write ( self ) -> None : \"\"\"Write the dataset to disk. This method is specifc to each format, and need to be implemented in the writer class. \"\"\" Bases: BaseWriter Source code in detection_datasets/writers/mmdet.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class MmdetWriter ( BaseWriter ): format = \"mmdet\" def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in self . data . bbox ] def write ( self ) -> None : \"\"\"Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. \"\"\" for split in self . data . split . unique (): os . makedirs ( os . path . join ( self . dataset_dir , split , \"images\" )) split_data = self . data [ self . data . split == split ] dataset = self . _make_mmdet_data ( split_data ) self . _save_dataset ( dataset , split ) def _make_mmdet_data ( self , data_split : pd . DataFrame ): mmdet_data = [] source_images = [] for _ , row in data_split . iterrows (): annotations = {} annotations [ \"bboxes\" ] = row [ \"bbox\" ] annotations [ \"labels\" ] = row [ \"category_id\" ] data = {} data [ \"filename\" ] = \"\" . join (( str ( row [ \"image_id\" ]), \".jpg\" )) data [ \"width\" ] = row [ \"width\" ] data [ \"height\" ] = row [ \"height\" ] data [ \"ann\" ] = annotations mmdet_data . append ( data ) source_images . append ( row [ \"image_path\" ]) dataset = { \"mmdet_data\" : mmdet_data , \"source_images\" : source_images } return dataset def _save_dataset ( self , dataset : Dict [ str , List [ str ]], split : str ): \"\"\"Create a new directory and saves the dataset and images.\"\"\" split_path = os . path . join ( self . dataset_dir , split ) mmdet_data = dataset [ \"mmdet_data\" ] source_images = dataset [ \"source_images\" ] # Labels file = os . path . join ( split_path , \"annotation.json\" ) with open ( file , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( mmdet_data , f , ensure_ascii = False , indent = 4 ) # Images for mmdet_data_image , original_image_path in zip ( mmdet_data , source_images ): out_file = os . path . join ( self . dataset_dir , split , \"images\" , mmdet_data_image [ \"filename\" ]) shutil . copyfile ( original_image_path , out_file ) __init__ ( ** kwargs ) # Initialize the YoloWriter. Source code in detection_datasets/writers/mmdet.py 15 16 17 18 19 def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in self . data . bbox ] write () # Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. Source code in detection_datasets/writers/mmdet.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def write ( self ) -> None : \"\"\"Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. \"\"\" for split in self . data . split . unique (): os . makedirs ( os . path . join ( self . dataset_dir , split , \"images\" )) split_data = self . data [ self . data . split == split ] dataset = self . _make_mmdet_data ( split_data ) self . _save_dataset ( dataset , split ) Bases: BaseWriter Write a dataset to a directory in the YOLO format. Source code in detection_datasets/writers/yolo.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 class YoloWriter ( BaseWriter ): \"\"\"Write a dataset to a directory in the YOLO format.\"\"\" format = \"yolo\" def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_yolo () for bbox in bboxes ] for bboxes in self . data . bbox ] def write ( self ) -> None : \"\"\"Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. \"\"\" self . _write_yaml () for split in self . data . split . unique (): self . _make_dirs ( split ) split_data = self . data [ self . data . split == split ] self . _write_images_labels_parallel ( split_data ) def _write_yaml ( self ) -> None : \"\"\"Writes the YAML file for the dataset. In the YOLO format, this file contains the path to the images, the names of the classes, and the number of classes. \"\"\" os . makedirs ( self . dataset_dir ) yaml_template_formated = YAML_TEMPLATE . format ( path = self . dataset_dir , n_classes = self . n_classes , class_names = \", \" . join ( self . class_names ), ) yaml_dataset = yaml . load ( yaml_template_formated ) with open ( os . path . join ( self . dataset_dir , \"dataset.yml\" ), \"w\" ) as outfile : yaml . dump ( yaml_dataset , outfile ) def _make_dirs ( self , split : str ) -> None : \"\"\"Create the directories (images, labels) for the given split. Args: split: The split to create the directories for (train, val, test). \"\"\" os . makedirs ( os . path . join ( self . dataset_dir , \"images\" , split )) os . makedirs ( os . path . join ( self . dataset_dir , \"labels\" , split )) def _write_images_labels_parallel ( self , split_data : pd . DataFrame ) -> None : \"\"\"Wraps _write_images_labels for parallelization. Args: split_data: The data to write corresponding to a single split. \"\"\" Parallel ()( delayed ( self . _write_images_labels )( row ) for _ , row in split_data . iterrows ()) def _write_images_labels ( self , row : pd . DataFrame ) -> None : \"\"\"Write the images and labels for a single image. Args: row: The row of the dataframe to write. \"\"\" row = row . to_frame () . T # Images in_file = row . image_path . values [ 0 ] out_file = self . _get_filename ( row , \"images\" ) shutil . copyfile ( in_file , out_file ) # Labels out_file = self . _get_filename ( row , \"labels\" ) data = row . explode ([ \"bbox_id\" , \"category_id\" , \"area\" , \"bbox\" ]) with open ( out_file , \"w\" ) as f : for _ , r in data . iterrows (): labels = \" \" . join (( str ( r . category_id ), str ( r . bbox [ 0 ]), str ( r . bbox [ 1 ]), str ( r . bbox [ 2 ]), str ( r . bbox [ 3 ]))) f . write ( labels + \" \\n \" ) def _get_filename ( self , row : pd . Series , task : str ) -> str : \"\"\"Get the filename for the given row and task. Args: row: The row of the dataframe to write. task: The task to get the filename for (images, labels). Returns: The filename for the given row and task. Raises: ValueError: If the task is not images or labels. \"\"\" split = row . split . values [ 0 ] image_id = str ( row . image_id . values [ 0 ]) if task == \"labels\" : return os . path . join ( self . dataset_dir , \"labels\" , split , image_id + \".txt\" ) elif task == \"images\" : return os . path . join ( self . dataset_dir , \"images\" , split , image_id + \".jpg\" ) else : raise ValueError ( f \"Task must be either 'lables' or 'images', not { task } \" ) __init__ ( ** kwargs ) # Initialize the YoloWriter. Source code in detection_datasets/writers/yolo.py 29 30 31 32 33 def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_yolo () for bbox in bboxes ] for bboxes in self . data . bbox ] write () # Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. Source code in detection_datasets/writers/yolo.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def write ( self ) -> None : \"\"\"Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. \"\"\" self . _write_yaml () for split in self . data . split . unique (): self . _make_dirs ( split ) split_data = self . data [ self . data . split == split ] self . _write_images_labels_parallel ( split_data )","title":"Writers"},{"location":"reference/writers/#detection_datasets.writers.base.BaseWriter.__init__","text":"Base class for writing datasets to disk. Parameters: Name Type Description Default dataset DetectionDataset Dataframe containing the dataset to write to disk. required name str Name of the dataset to be created in the \"path\" directory. required path str Path to the directory where the dataset will be created. required Source code in detection_datasets/writers/base.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , dataset : DetectionDataset , name : str , path : str , ) -> None : \"\"\"Base class for writing datasets to disk. Args: dataset: Dataframe containing the dataset to write to disk. name: Name of the dataset to be created in the \"path\" directory. path: Path to the directory where the dataset will be created. \"\"\" self . data = dataset . set_format ( index = \"image\" ) . reset_index () self . name = name self . path = path self . dataset_dir = os . path . join ( self . path , self . name ) self . class_names = dataset . category_names self . n_classes = dataset . n_categories self . n_images = dataset . n_images self . split_proportions = dataset . split_proportions","title":"__init__()"},{"location":"reference/writers/#detection_datasets.writers.base.BaseWriter.write","text":"Write the dataset to disk. This method is specifc to each format, and need to be implemented in the writer class. Source code in detection_datasets/writers/base.py 35 36 37 38 39 40 @abstractmethod def write ( self ) -> None : \"\"\"Write the dataset to disk. This method is specifc to each format, and need to be implemented in the writer class. \"\"\" Bases: BaseWriter Source code in detection_datasets/writers/mmdet.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class MmdetWriter ( BaseWriter ): format = \"mmdet\" def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in self . data . bbox ] def write ( self ) -> None : \"\"\"Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. \"\"\" for split in self . data . split . unique (): os . makedirs ( os . path . join ( self . dataset_dir , split , \"images\" )) split_data = self . data [ self . data . split == split ] dataset = self . _make_mmdet_data ( split_data ) self . _save_dataset ( dataset , split ) def _make_mmdet_data ( self , data_split : pd . DataFrame ): mmdet_data = [] source_images = [] for _ , row in data_split . iterrows (): annotations = {} annotations [ \"bboxes\" ] = row [ \"bbox\" ] annotations [ \"labels\" ] = row [ \"category_id\" ] data = {} data [ \"filename\" ] = \"\" . join (( str ( row [ \"image_id\" ]), \".jpg\" )) data [ \"width\" ] = row [ \"width\" ] data [ \"height\" ] = row [ \"height\" ] data [ \"ann\" ] = annotations mmdet_data . append ( data ) source_images . append ( row [ \"image_path\" ]) dataset = { \"mmdet_data\" : mmdet_data , \"source_images\" : source_images } return dataset def _save_dataset ( self , dataset : Dict [ str , List [ str ]], split : str ): \"\"\"Create a new directory and saves the dataset and images.\"\"\" split_path = os . path . join ( self . dataset_dir , split ) mmdet_data = dataset [ \"mmdet_data\" ] source_images = dataset [ \"source_images\" ] # Labels file = os . path . join ( split_path , \"annotation.json\" ) with open ( file , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( mmdet_data , f , ensure_ascii = False , indent = 4 ) # Images for mmdet_data_image , original_image_path in zip ( mmdet_data , source_images ): out_file = os . path . join ( self . dataset_dir , split , \"images\" , mmdet_data_image [ \"filename\" ]) shutil . copyfile ( original_image_path , out_file )","title":"write()"},{"location":"reference/writers/#detection_datasets.writers.mmdet.MmdetWriter.__init__","text":"Initialize the YoloWriter. Source code in detection_datasets/writers/mmdet.py 15 16 17 18 19 def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_voc () for bbox in bboxes ] for bboxes in self . data . bbox ]","title":"__init__()"},{"location":"reference/writers/#detection_datasets.writers.mmdet.MmdetWriter.write","text":"Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. Source code in detection_datasets/writers/mmdet.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def write ( self ) -> None : \"\"\"Write the dataset to disk. For the MMDET format, the associated steps are: 1. Create the directories for the images and annotations. 2. Prepare the data for any given split. 3. Write the annotation file to disk for each split. 4. Write the images to disk for each split. \"\"\" for split in self . data . split . unique (): os . makedirs ( os . path . join ( self . dataset_dir , split , \"images\" )) split_data = self . data [ self . data . split == split ] dataset = self . _make_mmdet_data ( split_data ) self . _save_dataset ( dataset , split ) Bases: BaseWriter Write a dataset to a directory in the YOLO format. Source code in detection_datasets/writers/yolo.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 class YoloWriter ( BaseWriter ): \"\"\"Write a dataset to a directory in the YOLO format.\"\"\" format = \"yolo\" def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_yolo () for bbox in bboxes ] for bboxes in self . data . bbox ] def write ( self ) -> None : \"\"\"Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. \"\"\" self . _write_yaml () for split in self . data . split . unique (): self . _make_dirs ( split ) split_data = self . data [ self . data . split == split ] self . _write_images_labels_parallel ( split_data ) def _write_yaml ( self ) -> None : \"\"\"Writes the YAML file for the dataset. In the YOLO format, this file contains the path to the images, the names of the classes, and the number of classes. \"\"\" os . makedirs ( self . dataset_dir ) yaml_template_formated = YAML_TEMPLATE . format ( path = self . dataset_dir , n_classes = self . n_classes , class_names = \", \" . join ( self . class_names ), ) yaml_dataset = yaml . load ( yaml_template_formated ) with open ( os . path . join ( self . dataset_dir , \"dataset.yml\" ), \"w\" ) as outfile : yaml . dump ( yaml_dataset , outfile ) def _make_dirs ( self , split : str ) -> None : \"\"\"Create the directories (images, labels) for the given split. Args: split: The split to create the directories for (train, val, test). \"\"\" os . makedirs ( os . path . join ( self . dataset_dir , \"images\" , split )) os . makedirs ( os . path . join ( self . dataset_dir , \"labels\" , split )) def _write_images_labels_parallel ( self , split_data : pd . DataFrame ) -> None : \"\"\"Wraps _write_images_labels for parallelization. Args: split_data: The data to write corresponding to a single split. \"\"\" Parallel ()( delayed ( self . _write_images_labels )( row ) for _ , row in split_data . iterrows ()) def _write_images_labels ( self , row : pd . DataFrame ) -> None : \"\"\"Write the images and labels for a single image. Args: row: The row of the dataframe to write. \"\"\" row = row . to_frame () . T # Images in_file = row . image_path . values [ 0 ] out_file = self . _get_filename ( row , \"images\" ) shutil . copyfile ( in_file , out_file ) # Labels out_file = self . _get_filename ( row , \"labels\" ) data = row . explode ([ \"bbox_id\" , \"category_id\" , \"area\" , \"bbox\" ]) with open ( out_file , \"w\" ) as f : for _ , r in data . iterrows (): labels = \" \" . join (( str ( r . category_id ), str ( r . bbox [ 0 ]), str ( r . bbox [ 1 ]), str ( r . bbox [ 2 ]), str ( r . bbox [ 3 ]))) f . write ( labels + \" \\n \" ) def _get_filename ( self , row : pd . Series , task : str ) -> str : \"\"\"Get the filename for the given row and task. Args: row: The row of the dataframe to write. task: The task to get the filename for (images, labels). Returns: The filename for the given row and task. Raises: ValueError: If the task is not images or labels. \"\"\" split = row . split . values [ 0 ] image_id = str ( row . image_id . values [ 0 ]) if task == \"labels\" : return os . path . join ( self . dataset_dir , \"labels\" , split , image_id + \".txt\" ) elif task == \"images\" : return os . path . join ( self . dataset_dir , \"images\" , split , image_id + \".jpg\" ) else : raise ValueError ( f \"Task must be either 'lables' or 'images', not { task } \" )","title":"write()"},{"location":"reference/writers/#detection_datasets.writers.yolo.YoloWriter.__init__","text":"Initialize the YoloWriter. Source code in detection_datasets/writers/yolo.py 29 30 31 32 33 def __init__ ( self , ** kwargs ) -> None : \"\"\"Initialize the YoloWriter.\"\"\" super () . __init__ ( ** kwargs ) self . data [ \"bbox\" ] = [[ bbox . to_yolo () for bbox in bboxes ] for bboxes in self . data . bbox ]","title":"__init__()"},{"location":"reference/writers/#detection_datasets.writers.yolo.YoloWriter.write","text":"Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. Source code in detection_datasets/writers/yolo.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def write ( self ) -> None : \"\"\"Write the dataset to disk. For the YOLO format, the associated steps are: 1. Write the YAML file. 2. Create the directories for the images and labels. 3. Write the images and labels. \"\"\" self . _write_yaml () for split in self . data . split . unique (): self . _make_dirs ( split ) split_data = self . data [ self . data . split == split ] self . _write_images_labels_parallel ( split_data )","title":"write()"}]}